# Starter pipeline
# Start with a minimal pipeline that you can customize to build and deploy your code.
# Add steps that build, run tests, deploy, and more:
# https://aka.ms/yaml


trigger: none

resources:
  repositories:
    - repository: AksEdge
      type: github
      endpoint: AksEdge-GithubConnection
      name: Azure/AKS-Edge

jobs:
  - job: aidescript_e2e_test
    displayName: Run E2E Aide Test Script
    pool: 1es-aksiot-windows-x64-ltsc-2021-test-pool
    timeoutInMinutes: 60
    
    steps:
      - checkout: AksEdge
        path: self
        clean: true
        fetchDepth: 1
      
      - powershell: |
          $CheckInstaller = Get-WmiObject -Class Win32_Product | where Name -match "AKS Edge Essentials - (K8s|K3s)"
          $Module = Get-Module -ListAvailable -Name AksEdge
          if ($CheckInstaller -ne $Null -Or $Module -ne $Null)
          {
            Write-Error "AksEdge is already installed on this agent"
            Exit 1
          }
          Write-Host "AksEdge is not installed on this agent"

          $freememInMB = ((Get-CimInstance -Class Win32_OperatingSystem).FreePhysicalMemory / 1024)
          $freememInMBRounded = [Math]::Round($freememInMB)
          if ($freememInMbRounded -lt 4096)
          {
            Write-Error "The host does not have enough resources to install and run AksEdge"
            Exit 1
          }
          Write-Host "The host has $freememInMBRounded free memory, AksEdge can be installed on it"

          $PSConfiguration = Get-ExecutionPolicy
          if ($PSConfiguration -ne "Bypass" -and $PSConfiguration -ne "Unrestricted")
          {
            Write-Error "The host current powershell configuration is $PSConfiguration, expected configuration is Bypass or Unrestricted"
            Exit 1
          }
          Write-Host "The host current powershell configuration is $PSConfiguration"

          $SSHCheck = (Get-WindowsCapability -Online | Where-Object Name -like 'OpenSSH.Client*').State
          $HyperVHyperVisor = (Get-WindowsOptionalFeature -FeatureName Microsoft-Hyper-V-Hypervisor -Online).State
          $HyperV = (Get-WindowsOptionalFeature -FeatureName Microsoft-Hyper-V -Online).State
          $HyperVMngPowershell = (Get-WindowsOptionalFeature -FeatureName Microsoft-Hyper-V-Management-PowerShell -Online).State
          if ($SSHCheck -ne "Installed" -Or $HyperVHyperVisor -ne "Enabled" -Or $HyperV -ne "Enabled" -Or $HyperVMngPowershell -ne "Enabled")
          {
            Write-Error "Not all software modules are installed, the software modules that are needed are: OpenSSH.Client, Microsoft-Hyper-V-Hypervisor, Microsoft-Hyper-V, Microsoft-Hyper-V-Management-PowerShell."
            Exit 1
          }
          Write-Host "All the software modules are installed: OpenSSH.Client, Microsoft-Hyper-V-Hypervisor, Microsoft-Hyper-V, Microsoft-Hyper-V-Management-PowerShell."
        displayName: 'Validating agent state'